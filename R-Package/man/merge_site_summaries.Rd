% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/merge_site_summaries.R
\name{merge_site_summaries}
\alias{merge_site_summaries}
\title{Merging (Data Collection) Site Summaries}
\usage{
merge_site_summaries(data, output_folder = NULL, suppress_list_output = FALSE)
}
\arguments{
\item{data}{The function expects the input to be a list of data frames or a path to a folder containing the data collection site summaries as .csv files. The input may either be produced by the MetaPipeX::summarizes_sites() function, or any inputs that use the data template. A template of this data frame is available on \href{https://github.com/JensFuenderich/MetaPipeX/blob/main/Supplementary_Material/Table_Templates/2_Site_Summaries/Site_Summaries_template.csv}{{github}}, as is a \href{https://github.com/JensFuenderich/MetaPipeX/blob/main/Supplementary_Material/Table_Templates/2_Site_Summaries/codebook_for_site_summaries.csv}{{codebook}} for unambiguous identification of the abbreviations.}

\item{output_folder}{Define a path to which the merged (data collection) site summaries and the codebook are exported. If no path is specified, results are returned only in R.}

\item{suppress_list_output}{A logical indicating whether results should be returned in R. If TRUE, no output is returned in R.}
}
\value{
A list object containing the following components: \cr
## merged_site_summaries
A data frame with all site summaries from the input.

## codebook
A codebook that applies to the data frame (merged_site_summaries). \cr
In order to export the data structure as .csv files in a folder, output_folder has to be specified.
}
\description{
\loadmathjax{}
\(
\\let\\underscore_
\)
Function to merge the data collection site aggregates returned by MetaPipeX::summarize_sites() into a single data frame. This is the second standardized function (and the fourth computational step) of the MetaPipeX pipeline. For more details on the pipeline, refer to the documentation of the MetaPipeX-package.
}
\details{
No transformations are performed on the data in this step of the MetaPipeX pipeline.
}
\examples{

# import the according table template
Site_Summaries_template <- readr::read_csv(url(
paste("https://raw.githubusercontent.com/JensFuenderich/MetaPipeX/main/Supplementary_Material/",
"Table_Templates/2_Site_Summaries/Site_Summaries_template.csv",
sep = ""
)))

# set seed for drawing data
set.seed(1973)

# create vectors with names
MultiLab_names <- c("MultiLab_1", "MultiLab_1", "MultiLab_2",  "MultiLab_2")
MASC_names <- c("Effect_A", "Effect_B", "Effect_C", "Effect_D")
Data_Collection_Site_names <- c("Lab_A", "Lab_B", "Lab_C", "Lab_D", "Lab_E", "Lab_F", "Lab_G", "Lab_H")

# random sampling for simulated data & building identifier variables
list_of_site_summaries <- lapply(1:4, function(x){
  # sampling
  data_example <- as.data.frame(matrix(
  data = stats::rnorm(n = 200*(ncol(Site_Summaries_template)-3), mean = 5, sd = 0.5),
  nrow = 200,
  ncol = ncol(Site_Summaries_template)-3)
  )
  # rename columns according to template
  names(data_example) <- names(
  Site_Summaries_template
  )[4:length(names(Site_Summaries_template))]
  data_example$T_N <- round(data_example$T_N, 0)
  data_example$T_N <- round(data_example$C_N, 0)
  # building identifier variables
  MultiLab <- rep(MultiLab_names[x], times = nrow(data_example))
  MASC <- rep(MASC_names[x], times = nrow(data_example))
  Data_Collection_Site <- rep(if (x == 1 | x == 2) {
  Data_Collection_Site_names[1:4]
  } else if (x == 3 | x == 4) {
  Data_Collection_Site_names[5:8]
  }, each = nrow(data_example)/4)
  # combine data & identifiers
  cbind(MultiLab, MASC, Data_Collection_Site, data_example)
})
# rename list objects
names(list_of_site_summaries) <- c("MultiLab_1_MASC_A_Site_summaries",
                                   "MultiLab_1_MASC_B_Site_summaries",
                                   "MultiLab_2_MASC_C_Site_summaries",
                                   "MultiLab_2_MASC_D_Site_summaries")

## applying the input to the MetaPipeX function

# run merge_site_summaries
example_MetaPipeX_output <- MetaPipeX::merge_site_summaries(
data = list_of_site_summaries
)

\dontrun{
All examples with additional comments are available on github:
https://github.com/JensFuenderich/MetaPipeX/tree/main/Supplementary_Material/Code_Examples
}


}
