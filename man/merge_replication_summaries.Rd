% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/merge_replication_summaries.R
\name{merge_replication_summaries}
\alias{merge_replication_summaries}
\title{Merging Replication Summaries}
\usage{
merge_replication_summaries(
  data,
  output_folder = NULL,
  suppress_list_output = FALSE
)
}
\arguments{
\item{data}{The function expects the input to be a list of data frames or a path to a folder containing the replication summaries as .csv files. The input may either be produced by the MetaPipeX::create_replication_summaries() function, or any inputs that use the data template. A template of this data frame is available on \href{https://github.com/JensFuenderich/MetaPipeX/blob/main/Supplementary_Material/Table_Templates/2_Replication_Summaries/Replication_Summaries_template.csv}{{github}}, as is a \href{https://github.com/JensFuenderich/MetaPipeX/blob/main/Supplementary_Material/Table_Templates/2_Replication_Summaries/codebook_for_replication_summaries.csv}{{codebook}} for unambiguous identification of the abbreviations.}

\item{output_folder}{Define a path to which the merged replication summaries and the codebook are exported. If no path is specified, results are returned only in R.}

\item{suppress_list_output}{A logical indicating whether results should be returned in R. If TRUE, no output is returned in R.}
}
\value{
A list object containing the following components: \cr
## merged_replication_summaries
A data frame with all replications from the input.

## codebook
A codebook that applies to the data frame (merged_replication_summaries). \cr
In order to export the data structure as .csv files in a folder, output_folder has to be specified.
}
\description{
\loadmathjax{}
\(
\\let\\underscore_
\)
Function to merge the replication statistics returned by MetaPipeX::create_replication_summaries() into a single data frame. This is the second function (and the fourth computational step) of the MetaPipeX pipeline. For more details on the pipeline, refer to the documentation of the MetaPipeX-package.
}
\details{
No transformations are performed on the data in this step of the MetaPipeX pipeline.
}
\examples{

# import the according table template
Replication_Summaries_template <- readr::read_csv(url(
paste("https://raw.githubusercontent.com/JensFuenderich/MetaPipeX/main/Supplementary_Material/",
"Table_Templates/2_Replication_Summaries/Replication_Summaries_template.csv",
sep = ""
)))

# set seed for drawing data
set.seed(1973)

# create vectors with names
MultiLab_names <- c("MultiLab_1", "MultiLab_1", "MultiLab_2",  "MultiLab_2")
ReplicationProject_names <- c("Effect_A", "Effect_B", "Effect_C", "Effect_D")
Replication_names <- c("Lab_A", "Lab_B", "Lab_C", "Lab_D", "Lab_E", "Lab_F", "Lab_G", "Lab_H")

# random sampling for simulated data & building identifier variables
list_of_replication_summaries <- lapply(1:4, function(x){
  # sampling
  data_example <- as.data.frame(matrix(
  data = stats::rnorm(n = 200*(ncol(Replication_Summaries_template)-3), mean = 5, sd = 0.5),
  nrow = 200,
  ncol = ncol(Replication_Summaries_template)-3)
  )
  # rename columns according to template
  names(data_example) <- names(
  Replication_Summaries_template
  )[4:length(names(Replication_Summaries_template))]
  data_example$T_N <- round(data_example$T_N, 0)
  data_example$T_N <- round(data_example$C_N, 0)
  # building identifier variables
  MultiLab <- rep(MultiLab_names[x], times = nrow(data_example))
  ReplicationProject <- rep(ReplicationProject_names[x], times = nrow(data_example))
  Replication <- rep(if (x == 1 | x == 2) {
  Replication_names[1:4]
  } else if (x == 3 | x == 4) {
  Replication_names[5:8]
  }, each = nrow(data_example)/4)
  # combine data & identifiers
  cbind(MultiLab, ReplicationProject, Replication, data_example)
})
# rename list objects
names(list_of_replication_summaries) <- c("MultiLab_1_ReplicationProject_A_Replication_summaries",
                                          "MultiLab_1_ReplicationProject_B_Replication_summaries",
                                          "MultiLab_2_ReplicationProject_C_Replication_summaries",
                                          "MultiLab_2_ReplicationProject_D_Replication_summaries")

## applying the input to the MetaPipeX function

# run merge_replication_summaries
example_MetaPipeX_output <- MetaPipeX::merge_replication_summaries(
data = list_of_replication_summaries
)

\dontrun{
All examples with additional comments are available on github:
https://github.com/JensFuenderich/MetaPipeX/tree/main/Supplementary_Material/Code_Examples
}


}
